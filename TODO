-*- mode: markdown -*- 

# TO DO - Feature requests

* Enable `releases="July 2016"` to work for the latest releases in
  `abs_cat_tables` and `abs_cat_stats`.


* Hi Michelle, congratulations – you get an award for finding a feature limit
  (shortcoming) in my package (I don’t know what the award could be). It’s
  something I’ll have to address in my next update.

  In the meantime try the following (non-trivial) work-around – it creates the
  query filter you need, and breaks the filter set into several smaller filter
  sets, and serially queries ABS.Stat to get around the API query length limit.

  Note that the ABS.Stat ERP data for different region levels are included as
  separate rows within the same dataset, so while you can download data for both
  GCCSA’s and SA4 in one call, the geography (‘region’) and value will each be
  listed in the same column – it’s how the ABS.Stat API delivers the data. To
  have separate columns denoting the SA4 and GCCSA, you’ll need to subsequently
  join the data to GCCSA-SA4 concordance table (the last code block attaches the
  SA4 code to the table to make it easier for you.  Also note, the
  abs_metadata() function is useful to scan the shape of the ABS.Stat table to
  help in shaping your query (was of help to me in designing work-around, but
  not much in getting round the query length limit)

```r
	set <- .Primitive("[[<-")
	## Get metadata for ABS.Stat dataset
	abs_meta <- abs_metadata('ABS_ANNUAL_ERP_ASGS2016')
## Create filter
ds_filter <- abs_search(pattern=c("Estimated Resident Population",
                                  "Statistical Area Level 4",
                                  ## "^\\d{1,3}$",
                                  "Annual"),
                        dataset='ABS_ANNUAL_ERP_ASGS2016', code_only=TRUE) %>%
  `[[<-`("ASGS_2016",
         grep("^\\d{3}$", abs_meta$CL_ABS_ANNUAL_ERP_ASGS2016_ASGS_2016$Code, value=TRUE)) %>%
  map(~ .x %>% split(., ceiling(seq_along(.)/26))) %>%
  cross;

## Download Jun 2018 SA4 ERP
SA4_raw <-
  lapply(ds_filter,
         function(i_filter)
           abs_stats('ABS_ANNUAL_ERP_ASGS2016',
                     start_date="2018", end_date="2018",
                     filter=i_filter)
         ) %>%
  bind_rows;

## Append SA4 region codes
SA4_raw %<>%
  left_join(abs_meta$CL_ABS_ANNUAL_ERP_ASGS2016_ASGS_2016,
            by=c("region" = "Description")) %>%
  rename(sa4_2016_code = Code)

 



## Completed functions

* Add argument: `format = c("table", "raw")` argument to `abs_stats` function to
  provide option to return results as raw JSON

* Add functionality to check for zero-length data sets returned by `abs_stats`,
  to avoid failing on bind_rows step. [COMPLETED 2019-12-20]

* The ABS Engineering Construction tables seem to require that the
  `sub(regex_table_name, ...)` has `ignore.case = TRUE` (to capture "TABLE") -
  [COMPLETED 2018-09-15]

* Add function to list all available releases for a specified catalogue
  number. [COMPLETED 2019-12-20 - `abs_cat_releases`]

* Fix path variables in `abs_cat_tables` function.

* Fix `rba_stats` function - error on loading tables D2 & G3, among possible
  others. (Reported by David Stephan ) - [COMPLETED 2019-12-20]


## ABS API functions

* `abs_stats function` - Add `simplify` argument to `abs_stats` function to
    provide option to return raw sdmx-json format output

* Simplify `abs_cachetable` to include only a list of datasets and call
  abs_metadata each time detailed dataset information is required.

* Wrap all url calls inside a `try`/`catch`
  - Packages which use Internet resources should fail gracefully with an informative message
    if the resource is not available

* Test all ABS catalogue functions

* `abs_cat_stats`
  - Insert code to handle Date class `releases` arguments, e.g. releases=as.Date("2017-12-01").
  - Add `header_start` and `header_rows` argument to `abs_cat_stats` function.
  - Add `return_urls` functionality to `abs_cat_stats` function - [DONE 2018-11-01]

* `abs_cat_tables`
  - Add code to handle varying number of paths returned by `abs_cat_tables`
  - Remove Released 'dd/mm/yyyy' columns from final results.
  - Modify `abs_cat_tables` function to list tables for specified catalogue numbers. [DONE 2018-11-05]
  - Generalise `abs_cat_tables` function to handle non-time series results with only one column of URLs. [DONE 2018-11-06]

* `abs_cat_unzip`
  - Added exdir argument - [DONE 2018-11-01]

* `abs_cat_download`
  - Added exdir argument - [DONE 2018-11-01]

* Candidate additional arguments for `abs_stats`
#' `@param include_lastUpdated = FALSE` A character vector of regular expressions denoting
#'   tables to download. The default ('All') downloads all time series spreadsheet tables for each
#'   specified catalogue. Use a list to specify different table sets for each specified ABS
#'   catalogue number.


* Check warning messages issued by `rba_stats(url = ...)`:
#' Warning messages:
#' 1: In eval(substitute(list(...)), `_data`, parent.frame()) :
#' NAs introduced by coercion
